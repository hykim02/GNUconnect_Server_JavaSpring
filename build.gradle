plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id "io.sentry.jvm.gradle" version "5.5.0"
}

// 환경 변수에서 ENVIRONMENT 값 가져오기
def environment = System.getenv("ENVIRONMENT")

// ENVIRONMENT 값이 production인 경우에만 Sentry 빌드
if (environment == "production") {
	sentry {
		includeSourceContext = true
		org = "kimhuiyeong"
		projectName = "java-spring-boot"
		authToken = System.getenv("SENTRY_AUTH_TOKEN")
	}
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jar {
	enabled = false
}

dependencies {
	// 캐싱 redis 설정
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-core'
	implementation 'io.micrometer:micrometer-registry-prometheus'

	implementation 'io.sentry:sentry-spring-boot-starter-jakarta:8.3.0'
	implementation 'javax.enterprise:cdi-api:2.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// 테스트 코드에서 Lombok 사용할 경우 필요
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	compileOnly 'javax:javaee-api:8.0.1'

	// 테스트를 위한 h2 설정
	implementation 'com.h2database:h2'
	runtimeOnly 'com.h2database:h2'
}

tasks.named('test') {
	useJUnitPlatform()
	ignoreFailures = true
}